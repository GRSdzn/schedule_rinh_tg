import os
import aiohttp
import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv
from database import init_db, save_user_selection, get_user_selection, get_all_users

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
API_URL = 'https://rasp-api.rsue.ru/api/v1/schedule/lessons/'
TOKEN = os.getenv("TOKEN")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_schedule_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"))
    keyboard.add(KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"))
    keyboard.add(KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"))
    keyboard.add(KeyboardButton("‚è≥ –ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    selection = await get_user_selection(user_id)
    
    if selection:
        keyboard = create_schedule_keyboard()
        await message.reply(f"–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏: {selection}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=keyboard)
    else:
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(lambda message: message.text in ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", "‚è≥ –ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"])
async def schedule_by_period(message: types.Message):
    user_id = message.from_user.id
    selection = await get_user_selection(user_id)
    
    if not selection:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")
        return

    lessons = await fetch_api_schedule(selection)
    if lessons is None:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return

    text = message.text
    if "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" in text:
        response_text = filter_schedule_today(lessons)
    elif "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞" in text:
        response_text = filter_schedule_tomorrow(lessons)
    elif "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é" in text:
        response_text = filter_schedule_week(lessons)
    elif "–ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in text:
        response_text = get_nearest_schedule(lessons)  # ‚úÖ –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
    else:
        response_text = "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞."


    await message.reply(response_text, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@dp.message_handler()
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    selection = message.text.strip()
    await save_user_selection(user_id, selection)

    keyboard = create_schedule_keyboard()
    await message.reply(f"–ì—Ä—É–ø–ø–∞/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {selection}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å API
async def fetch_api_schedule(name: str):
    async with aiohttp.ClientSession() as session:
        async with session.get(f'{API_URL}{name}') as response:
            if response.status == 200:
                data = await response.json()
                return data
            return None

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def parse_date(date_str: str):
    return datetime.strptime(date_str, "%d.%m.%Y").date()

def filter_schedule_today(data):
    today = datetime.today().date()
    return get_schedule_for_date(data, today)

def filter_schedule_tomorrow(data):
    tomorrow = datetime.today().date() + timedelta(days=1)
    return get_schedule_for_date(data, tomorrow)

def filter_schedule_week(data):
    today = datetime.today().date()
    week_end = today + timedelta(days=6)
    return get_schedule_for_range(data, today, week_end)

def get_nearest_schedule(data):
    today = datetime.today().date()
    
    # –ù–∞–π–¥—ë–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É —Å –∑–∞–Ω—è—Ç–∏—è–º–∏
    for week in data.get("weeks", []):
        for day in week.get("days", []):
            day_date = parse_date(day["date"])
            if day_date >= today and any(pair["lessons"] for pair in day["pairs"]):
                return get_schedule_for_range(data, day_date, day_date + timedelta(days=6))
    
    return "–ë–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."

def get_schedule_for_date(data, date):
    return get_schedule_for_range(data, date, date)

def get_schedule_for_range(data, start_date, end_date):
    schedule = []
    
    for week in data.get("weeks", []):
        for day in week.get("days", []):
            day_date = parse_date(day["date"])
            if start_date <= day_date <= end_date:
                lessons = [
                    f"{pair['startTime']} - {lesson['subject']} ({lesson['kind']['shortName']}), –∞—É–¥. {lesson['audience']}, {lesson['teacher']['name']}"
                    for pair in day["pairs"] if pair["lessons"]
                    for lesson in pair["lessons"]
                ]
                if lessons:
                    schedule.append(f"üìÖ {day['name']} ({day['date']}):\n" + "\n".join(lessons))

    return "\n\n".join(schedule) if schedule else "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
async def send_start_message_to_users():
    users = await get_all_users()
    for user_id in users:
        selection = await get_user_selection(user_id)
        if selection:
            keyboard = create_schedule_keyboard()
            try:
                await bot.send_message(user_id, f"–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {selection}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=keyboard)
            except:
                continue

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    loop.run_until_complete(send_start_message_to_users())
    executor.start_polling(dp, skip_updates=True)
