import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
from aiogram.utils import executor
from dotenv import load_dotenv
from db.database import init_db, save_user_selection, get_user_selection, get_all_users
from handlers.schedule_handler import fetch_and_cache_schedule, get_schedule
from utils.utils import create_schedule_keyboard, rate_limit

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    selection = await get_user_selection(user_id)

    if selection:
        keyboard = create_schedule_keyboard()
        await message.reply(f"–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏: {selection}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=keyboard)
    else:
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(lambda message: message.text in ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", "‚è≥ –ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"])
@rate_limit(5)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ (5 —Å–µ–∫. –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏)
async def schedule_by_period(message: types.Message):
    user_id = message.from_user.id
    selection = await get_user_selection(user_id)

    if not selection:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")
        return

    schedule_data = await fetch_and_cache_schedule(selection)
    if schedule_data is None:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    text = message.text
    response_text = get_schedule(schedule_data, text)

    await message.reply(response_text, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@dp.message_handler()
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    selection = message.text.strip()
    await save_user_selection(user_id, selection)

    keyboard = create_schedule_keyboard()
    await message.reply(f"–ì—Ä—É–ø–ø–∞/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {selection}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=keyboard)

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
async def send_start_message_to_users():
    users = await get_all_users()
    for user_id in users:
        selection = await get_user_selection(user_id)
        if selection:
            keyboard = create_schedule_keyboard()
            try:
                await bot.send_message(user_id, f"–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {selection}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=keyboard)
            except:
                continue

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    loop.run_until_complete(send_start_message_to_users())
    executor.start_polling(dp, skip_updates=True)
