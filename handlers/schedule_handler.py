import aiohttp
import json
from datetime import datetime, timedelta
from db.database import get_schedule_cache, save_schedule_cache
from helpers.constants import URL_LESSONS

async def fetch_and_cache_schedule(name: str):
    """ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å API –∏–ª–∏ –∏–∑ –∫—ç—à–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏). """
    cached_data = await get_schedule_cache(name)
    if cached_data:
        return json.loads(cached_data)

    async with aiohttp.ClientSession() as session:
        async with session.get(f'{URL_LESSONS}{name}') as response:
            if response.status == 200:
                data = await response.json()
                await save_schedule_cache(name, json.dumps(data))
                return data
            return None

def parse_date(date_str: str):
    """ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime.date. """
    return datetime.strptime(date_str, "%d.%m.%Y").date()

def get_schedule(data, period):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. """
    today = datetime.today().date()
    tomorrow = today + timedelta(days=1)

    if "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" in period:
        return filter_schedule_by_date(data, today)
    elif "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞" in period:
        return filter_schedule_by_date(data, tomorrow)
    elif "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é" in period:
        return filter_schedule_week(data, today)
    elif "–ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in period:
        return get_nearest_schedule(data)
    return "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞."

def get_nearest_schedule(data):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞—è —Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–Ω—è, –≥–¥–µ –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è. """
    today = datetime.today().date()
    
    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É —Å –∑–∞–Ω—è—Ç–∏—è–º–∏
    for week in data.get("weeks", []):
        for day in week.get("days", []):
            day_date = parse_date(day["date"])
            if day_date >= today and any(pair["lessons"] for pair in day["pairs"]):
                return filter_schedule_week(data, day_date)

    return "‚è≥ –ë–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."

def filter_schedule_by_date(data, target_date):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É. """
    for week in data.get("weeks", []):
        for day in week.get("days", []):
            day_date = parse_date(day["date"])
            if day_date == target_date:
                return format_lessons(day)
    return f"üìÖ {target_date.strftime('%d.%m.%Y')} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."

def filter_schedule_week(data, start_date):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã. """
    week_end = start_date + timedelta(days=6)
    
    schedule = []
    for week in data.get("weeks", []):
        for day in week.get("days", []):
            day_date = parse_date(day["date"])
            if start_date <= day_date <= week_end:
                schedule.append(format_lessons(day))

    return "\n\n".join(schedule) if schedule else f"üìÖ –° {start_date.strftime('%d.%m.%Y')} –ø–æ {week_end.strftime('%d.%m.%Y')} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."

def format_lessons(day):
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç. """
    lessons = []
    for pair in day["pairs"]:
        for lesson in pair["lessons"]:
            lessons.append(f"‚è∞ {pair['startTime']} - {lesson['subject']} ({lesson['kind']['shortName']}), –∞—É–¥. {lesson['audience']}, {lesson['teacher']['name']}")
    
    if lessons:
        return f"üìÖ {day['name']} ({day['date']}):\n" + "\n".join(lessons)
    return f"üìÖ {day['name']} ({day['date']}): –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
