import time
from functools import wraps
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def create_schedule_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"))
    keyboard.add(KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"))
    keyboard.add(KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"))
    keyboard.add(KeyboardButton("‚è≥ –ë–ª–∏–∂–∞–π—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    return keyboard

# –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
user_last_request = {}

def rate_limit(seconds):
    def decorator(func):
        @wraps(func)
        async def wrapper(message, *args, **kwargs):
            user_id = message.from_user.id
            now = time.time()
            if user_id in user_last_request and now - user_last_request[user_id] < seconds:
                return await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
            user_last_request[user_id] = now
            return await func(message, *args, **kwargs)
        return wrapper
    return decorator
